// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package etl_indicadores_diresa.guardartramashis_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: GuardarTramasHis Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class GuardarTramasHis implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(bddiresa_Database != null){
				
					this.setProperty("bddiresa_Database", bddiresa_Database.toString());
				
			}
			
			if(bddiresa_Password != null){
				
					this.setProperty("bddiresa_Password", bddiresa_Password.toString());
				
			}
			
			if(bddiresa_AdditionalParams != null){
				
					this.setProperty("bddiresa_AdditionalParams", bddiresa_AdditionalParams.toString());
				
			}
			
			if(bddiresa_Login != null){
				
					this.setProperty("bddiresa_Login", bddiresa_Login.toString());
				
			}
			
			if(bddiresa_Port != null){
				
					this.setProperty("bddiresa_Port", bddiresa_Port.toString());
				
			}
			
			if(bddiresa_Server != null){
				
					this.setProperty("bddiresa_Server", bddiresa_Server.toString());
				
			}
			
		}

public String bddiresa_Database;
public String getBddiresa_Database(){
	return this.bddiresa_Database;
}
public java.lang.String bddiresa_Password;
public java.lang.String getBddiresa_Password(){
	return this.bddiresa_Password;
}
public String bddiresa_AdditionalParams;
public String getBddiresa_AdditionalParams(){
	return this.bddiresa_AdditionalParams;
}
public String bddiresa_Login;
public String getBddiresa_Login(){
	return this.bddiresa_Login;
}
public String bddiresa_Port;
public String getBddiresa_Port(){
	return this.bddiresa_Port;
}
public String bddiresa_Server;
public String getBddiresa_Server(){
	return this.bddiresa_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "GuardarTramasHis";
	private final String projectName = "ETL_INDICADORES_DIRESA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				GuardarTramasHis.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(GuardarTramasHis.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_pundig;

				public int getId_pundig () {
					return this.id_pundig;
				}
				
			    public String pundig_nom;

				public String getPundig_nom () {
					return this.pundig_nom;
				}
				
			    public String pundig_act;

				public String getPundig_act () {
					return this.pundig_act;
				}
				
			    public String punto_idodsis;

				public String getPunto_idodsis () {
					return this.punto_idodsis;
				}
				
			    public String punto_base;

				public String getPunto_base () {
					return this.punto_base;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_pundig;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.id_pundig != other.id_pundig)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.id_pundig = this.id_pundig;
	            other.pundig_nom = this.pundig_nom;
	            other.pundig_act = this.pundig_act;
	            other.punto_idodsis = this.punto_idodsis;
	            other.punto_base = this.punto_base;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.id_pundig = this.id_pundig;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
			        this.id_pundig = dis.readInt();
					
					this.pundig_nom = readString(dis);
					
					this.pundig_act = readString(dis);
					
					this.punto_idodsis = readString(dis);
					
					this.punto_base = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_pundig);
					
					// String
				
						writeString(this.pundig_nom,dos);
					
					// String
				
						writeString(this.pundig_act,dos);
					
					// String
				
						writeString(this.punto_idodsis,dos);
					
					// String
				
						writeString(this.punto_base,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pundig="+String.valueOf(id_pundig));
		sb.append(",pundig_nom="+pundig_nom);
		sb.append(",pundig_act="+pundig_act);
		sb.append(",punto_idodsis="+punto_idodsis);
		sb.append(",punto_base="+punto_base);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pundig, other.id_pundig);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];

	
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				
			    public String mes;

				public String getMes () {
					return this.mes;
				}
				
			    public String dia;

				public String getDia () {
					return this.dia;
				}
				
			    public String lote;

				public String getLote () {
					return this.lote;
				}
				
			    public String num_pag;

				public String getNum_pag () {
					return this.num_pag;
				}
				
			    public String num_reg;

				public String getNum_reg () {
					return this.num_reg;
				}
				
			    public String servicio;

				public String getServicio () {
					return this.servicio;
				}
				
			    public String disa;

				public String getDisa () {
					return this.disa;
				}
				
			    public String red;

				public String getRed () {
					return this.red;
				}
				
			    public String microred;

				public String getMicrored () {
					return this.microred;
				}
				
			    public String renaes;

				public String getRenaes () {
					return this.renaes;
				}
				
			    public String establecimiento;

				public String getEstablecimiento () {
					return this.establecimiento;
				}
				
			    public String id_cita;

				public String getId_cita () {
					return this.id_cita;
				}
				
			    public String tipo_doc;

				public String getTipo_doc () {
					return this.tipo_doc;
				}
				
			    public String identificador;

				public String getIdentificador () {
					return this.identificador;
				}
				
			    public String nro_doc;

				public String getNro_doc () {
					return this.nro_doc;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String paterno;

				public String getPaterno () {
					return this.paterno;
				}
				
			    public String materno;

				public String getMaterno () {
					return this.materno;
				}
				
			    public String fecha_nac;

				public String getFecha_nac () {
					return this.fecha_nac;
				}
				
			    public String nro_hcl;

				public String getNro_hcl () {
					return this.nro_hcl;
				}
				
			    public String fichafam;

				public String getFichafam () {
					return this.fichafam;
				}
				
			    public String financiador;

				public String getFinanciador () {
					return this.financiador;
				}
				
			    public String nro_afiliacion;

				public String getNro_afiliacion () {
					return this.nro_afiliacion;
				}
				
			    public String cond_eess;

				public String getCond_eess () {
					return this.cond_eess;
				}
				
			    public String cond_serv;

				public String getCond_serv () {
					return this.cond_serv;
				}
				
			    public String tipo_edad;

				public String getTipo_edad () {
					return this.tipo_edad;
				}
				
			    public String edad_pac_ano;

				public String getEdad_pac_ano () {
					return this.edad_pac_ano;
				}
				
			    public String edad_pac_mes;

				public String getEdad_pac_mes () {
					return this.edad_pac_mes;
				}
				
			    public String edad_pac_dia;

				public String getEdad_pac_dia () {
					return this.edad_pac_dia;
				}
				
			    public String ubigeo;

				public String getUbigeo () {
					return this.ubigeo;
				}
				
			    public String domicilio;

				public String getDomicilio () {
					return this.domicilio;
				}
				
			    public String turno_atencion;

				public String getTurno_atencion () {
					return this.turno_atencion;
				}
				
			    public String genero;

				public String getGenero () {
					return this.genero;
				}
				
			    public String etnia;

				public String getEtnia () {
					return this.etnia;
				}
				
			    public String id_ciex1;

				public String getId_ciex1 () {
					return this.id_ciex1;
				}
				
			    public String id_tipdiag1;

				public String getId_tipdiag1 () {
					return this.id_tipdiag1;
				}
				
			    public String valor_lab1;

				public String getValor_lab1 () {
					return this.valor_lab1;
				}
				
			    public String id_ciex2;

				public String getId_ciex2 () {
					return this.id_ciex2;
				}
				
			    public String id_tipdiag2;

				public String getId_tipdiag2 () {
					return this.id_tipdiag2;
				}
				
			    public String valor_lab2;

				public String getValor_lab2 () {
					return this.valor_lab2;
				}
				
			    public String id_ciex3;

				public String getId_ciex3 () {
					return this.id_ciex3;
				}
				
			    public String id_tipdiag3;

				public String getId_tipdiag3 () {
					return this.id_tipdiag3;
				}
				
			    public String valor_lab3;

				public String getValor_lab3 () {
					return this.valor_lab3;
				}
				
			    public String id_ciex4;

				public String getId_ciex4 () {
					return this.id_ciex4;
				}
				
			    public String id_tipdiag4;

				public String getId_tipdiag4 () {
					return this.id_tipdiag4;
				}
				
			    public String valor_lab4;

				public String getValor_lab4 () {
					return this.valor_lab4;
				}
				
			    public String id_ciex5;

				public String getId_ciex5 () {
					return this.id_ciex5;
				}
				
			    public String id_tipdiag5;

				public String getId_tipdiag5 () {
					return this.id_tipdiag5;
				}
				
			    public String valor_lab5;

				public String getValor_lab5 () {
					return this.valor_lab5;
				}
				
			    public String id_ciex6;

				public String getId_ciex6 () {
					return this.id_ciex6;
				}
				
			    public String id_tipdiag6;

				public String getId_tipdiag6 () {
					return this.id_tipdiag6;
				}
				
			    public String valor_lab6;

				public String getValor_lab6 () {
					return this.valor_lab6;
				}
				
			    public String fecha_resultado_h;

				public String getFecha_resultado_h () {
					return this.fecha_resultado_h;
				}
				
			    public String fecha_solicitud_h;

				public String getFecha_solicitud_h () {
					return this.fecha_solicitud_h;
				}
				
			    public String num_doc_atiende;

				public String getNum_doc_atiende () {
					return this.num_doc_atiende;
				}
				
			    public String atiende;

				public String getAtiende () {
					return this.atiende;
				}
				
			    public String num_doc_registra;

				public String getNum_doc_registra () {
					return this.num_doc_registra;
				}
				
			    public String registrador;

				public String getRegistrador () {
					return this.registrador;
				}
				
			    public String fecha_registro;

				public String getFecha_registro () {
					return this.fecha_registro;
				}
				
			    public String ult_modificacion;

				public String getUlt_modificacion () {
					return this.ult_modificacion;
				}
				
			    public String peso;

				public String getPeso () {
					return this.peso;
				}
				
			    public String talla;

				public String getTalla () {
					return this.talla;
				}
				
			    public String hb;

				public String getHb () {
					return this.hb;
				}
				
			    public String pab;

				public String getPab () {
					return this.pab;
				}
				
			    public String pc;

				public String getPc () {
					return this.pc;
				}
				
			    public String icm;

				public String getIcm () {
					return this.icm;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
					this.ano = readString(dis);
					
					this.mes = readString(dis);
					
					this.dia = readString(dis);
					
					this.lote = readString(dis);
					
					this.num_pag = readString(dis);
					
					this.num_reg = readString(dis);
					
					this.servicio = readString(dis);
					
					this.disa = readString(dis);
					
					this.red = readString(dis);
					
					this.microred = readString(dis);
					
					this.renaes = readString(dis);
					
					this.establecimiento = readString(dis);
					
					this.id_cita = readString(dis);
					
					this.tipo_doc = readString(dis);
					
					this.identificador = readString(dis);
					
					this.nro_doc = readString(dis);
					
					this.nombre = readString(dis);
					
					this.paterno = readString(dis);
					
					this.materno = readString(dis);
					
					this.fecha_nac = readString(dis);
					
					this.nro_hcl = readString(dis);
					
					this.fichafam = readString(dis);
					
					this.financiador = readString(dis);
					
					this.nro_afiliacion = readString(dis);
					
					this.cond_eess = readString(dis);
					
					this.cond_serv = readString(dis);
					
					this.tipo_edad = readString(dis);
					
					this.edad_pac_ano = readString(dis);
					
					this.edad_pac_mes = readString(dis);
					
					this.edad_pac_dia = readString(dis);
					
					this.ubigeo = readString(dis);
					
					this.domicilio = readString(dis);
					
					this.turno_atencion = readString(dis);
					
					this.genero = readString(dis);
					
					this.etnia = readString(dis);
					
					this.id_ciex1 = readString(dis);
					
					this.id_tipdiag1 = readString(dis);
					
					this.valor_lab1 = readString(dis);
					
					this.id_ciex2 = readString(dis);
					
					this.id_tipdiag2 = readString(dis);
					
					this.valor_lab2 = readString(dis);
					
					this.id_ciex3 = readString(dis);
					
					this.id_tipdiag3 = readString(dis);
					
					this.valor_lab3 = readString(dis);
					
					this.id_ciex4 = readString(dis);
					
					this.id_tipdiag4 = readString(dis);
					
					this.valor_lab4 = readString(dis);
					
					this.id_ciex5 = readString(dis);
					
					this.id_tipdiag5 = readString(dis);
					
					this.valor_lab5 = readString(dis);
					
					this.id_ciex6 = readString(dis);
					
					this.id_tipdiag6 = readString(dis);
					
					this.valor_lab6 = readString(dis);
					
					this.fecha_resultado_h = readString(dis);
					
					this.fecha_solicitud_h = readString(dis);
					
					this.num_doc_atiende = readString(dis);
					
					this.atiende = readString(dis);
					
					this.num_doc_registra = readString(dis);
					
					this.registrador = readString(dis);
					
					this.fecha_registro = readString(dis);
					
					this.ult_modificacion = readString(dis);
					
					this.peso = readString(dis);
					
					this.talla = readString(dis);
					
					this.hb = readString(dis);
					
					this.pab = readString(dis);
					
					this.pc = readString(dis);
					
					this.icm = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ano,dos);
					
					// String
				
						writeString(this.mes,dos);
					
					// String
				
						writeString(this.dia,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.num_pag,dos);
					
					// String
				
						writeString(this.num_reg,dos);
					
					// String
				
						writeString(this.servicio,dos);
					
					// String
				
						writeString(this.disa,dos);
					
					// String
				
						writeString(this.red,dos);
					
					// String
				
						writeString(this.microred,dos);
					
					// String
				
						writeString(this.renaes,dos);
					
					// String
				
						writeString(this.establecimiento,dos);
					
					// String
				
						writeString(this.id_cita,dos);
					
					// String
				
						writeString(this.tipo_doc,dos);
					
					// String
				
						writeString(this.identificador,dos);
					
					// String
				
						writeString(this.nro_doc,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.paterno,dos);
					
					// String
				
						writeString(this.materno,dos);
					
					// String
				
						writeString(this.fecha_nac,dos);
					
					// String
				
						writeString(this.nro_hcl,dos);
					
					// String
				
						writeString(this.fichafam,dos);
					
					// String
				
						writeString(this.financiador,dos);
					
					// String
				
						writeString(this.nro_afiliacion,dos);
					
					// String
				
						writeString(this.cond_eess,dos);
					
					// String
				
						writeString(this.cond_serv,dos);
					
					// String
				
						writeString(this.tipo_edad,dos);
					
					// String
				
						writeString(this.edad_pac_ano,dos);
					
					// String
				
						writeString(this.edad_pac_mes,dos);
					
					// String
				
						writeString(this.edad_pac_dia,dos);
					
					// String
				
						writeString(this.ubigeo,dos);
					
					// String
				
						writeString(this.domicilio,dos);
					
					// String
				
						writeString(this.turno_atencion,dos);
					
					// String
				
						writeString(this.genero,dos);
					
					// String
				
						writeString(this.etnia,dos);
					
					// String
				
						writeString(this.id_ciex1,dos);
					
					// String
				
						writeString(this.id_tipdiag1,dos);
					
					// String
				
						writeString(this.valor_lab1,dos);
					
					// String
				
						writeString(this.id_ciex2,dos);
					
					// String
				
						writeString(this.id_tipdiag2,dos);
					
					// String
				
						writeString(this.valor_lab2,dos);
					
					// String
				
						writeString(this.id_ciex3,dos);
					
					// String
				
						writeString(this.id_tipdiag3,dos);
					
					// String
				
						writeString(this.valor_lab3,dos);
					
					// String
				
						writeString(this.id_ciex4,dos);
					
					// String
				
						writeString(this.id_tipdiag4,dos);
					
					// String
				
						writeString(this.valor_lab4,dos);
					
					// String
				
						writeString(this.id_ciex5,dos);
					
					// String
				
						writeString(this.id_tipdiag5,dos);
					
					// String
				
						writeString(this.valor_lab5,dos);
					
					// String
				
						writeString(this.id_ciex6,dos);
					
					// String
				
						writeString(this.id_tipdiag6,dos);
					
					// String
				
						writeString(this.valor_lab6,dos);
					
					// String
				
						writeString(this.fecha_resultado_h,dos);
					
					// String
				
						writeString(this.fecha_solicitud_h,dos);
					
					// String
				
						writeString(this.num_doc_atiende,dos);
					
					// String
				
						writeString(this.atiende,dos);
					
					// String
				
						writeString(this.num_doc_registra,dos);
					
					// String
				
						writeString(this.registrador,dos);
					
					// String
				
						writeString(this.fecha_registro,dos);
					
					// String
				
						writeString(this.ult_modificacion,dos);
					
					// String
				
						writeString(this.peso,dos);
					
					// String
				
						writeString(this.talla,dos);
					
					// String
				
						writeString(this.hb,dos);
					
					// String
				
						writeString(this.pab,dos);
					
					// String
				
						writeString(this.pc,dos);
					
					// String
				
						writeString(this.icm,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ano="+ano);
		sb.append(",mes="+mes);
		sb.append(",dia="+dia);
		sb.append(",lote="+lote);
		sb.append(",num_pag="+num_pag);
		sb.append(",num_reg="+num_reg);
		sb.append(",servicio="+servicio);
		sb.append(",disa="+disa);
		sb.append(",red="+red);
		sb.append(",microred="+microred);
		sb.append(",renaes="+renaes);
		sb.append(",establecimiento="+establecimiento);
		sb.append(",id_cita="+id_cita);
		sb.append(",tipo_doc="+tipo_doc);
		sb.append(",identificador="+identificador);
		sb.append(",nro_doc="+nro_doc);
		sb.append(",nombre="+nombre);
		sb.append(",paterno="+paterno);
		sb.append(",materno="+materno);
		sb.append(",fecha_nac="+fecha_nac);
		sb.append(",nro_hcl="+nro_hcl);
		sb.append(",fichafam="+fichafam);
		sb.append(",financiador="+financiador);
		sb.append(",nro_afiliacion="+nro_afiliacion);
		sb.append(",cond_eess="+cond_eess);
		sb.append(",cond_serv="+cond_serv);
		sb.append(",tipo_edad="+tipo_edad);
		sb.append(",edad_pac_ano="+edad_pac_ano);
		sb.append(",edad_pac_mes="+edad_pac_mes);
		sb.append(",edad_pac_dia="+edad_pac_dia);
		sb.append(",ubigeo="+ubigeo);
		sb.append(",domicilio="+domicilio);
		sb.append(",turno_atencion="+turno_atencion);
		sb.append(",genero="+genero);
		sb.append(",etnia="+etnia);
		sb.append(",id_ciex1="+id_ciex1);
		sb.append(",id_tipdiag1="+id_tipdiag1);
		sb.append(",valor_lab1="+valor_lab1);
		sb.append(",id_ciex2="+id_ciex2);
		sb.append(",id_tipdiag2="+id_tipdiag2);
		sb.append(",valor_lab2="+valor_lab2);
		sb.append(",id_ciex3="+id_ciex3);
		sb.append(",id_tipdiag3="+id_tipdiag3);
		sb.append(",valor_lab3="+valor_lab3);
		sb.append(",id_ciex4="+id_ciex4);
		sb.append(",id_tipdiag4="+id_tipdiag4);
		sb.append(",valor_lab4="+valor_lab4);
		sb.append(",id_ciex5="+id_ciex5);
		sb.append(",id_tipdiag5="+id_tipdiag5);
		sb.append(",valor_lab5="+valor_lab5);
		sb.append(",id_ciex6="+id_ciex6);
		sb.append(",id_tipdiag6="+id_tipdiag6);
		sb.append(",valor_lab6="+valor_lab6);
		sb.append(",fecha_resultado_h="+fecha_resultado_h);
		sb.append(",fecha_solicitud_h="+fecha_solicitud_h);
		sb.append(",num_doc_atiende="+num_doc_atiende);
		sb.append(",atiende="+atiende);
		sb.append(",num_doc_registra="+num_doc_registra);
		sb.append(",registrador="+registrador);
		sb.append(",fecha_registro="+fecha_registro);
		sb.append(",ult_modificacion="+ult_modificacion);
		sb.append(",peso="+peso);
		sb.append(",talla="+talla);
		sb.append(",hb="+hb);
		sb.append(",pab="+pab);
		sb.append(",pc="+pc);
		sb.append(",icm="+icm);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hisStruct implements routines.system.IPersistableRow<hisStruct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];

	
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				
			    public String mes;

				public String getMes () {
					return this.mes;
				}
				
			    public String dia;

				public String getDia () {
					return this.dia;
				}
				
			    public String lote;

				public String getLote () {
					return this.lote;
				}
				
			    public String num_pag;

				public String getNum_pag () {
					return this.num_pag;
				}
				
			    public String num_reg;

				public String getNum_reg () {
					return this.num_reg;
				}
				
			    public String servicio;

				public String getServicio () {
					return this.servicio;
				}
				
			    public String disa;

				public String getDisa () {
					return this.disa;
				}
				
			    public String red;

				public String getRed () {
					return this.red;
				}
				
			    public String microred;

				public String getMicrored () {
					return this.microred;
				}
				
			    public String renaes;

				public String getRenaes () {
					return this.renaes;
				}
				
			    public String establecimiento;

				public String getEstablecimiento () {
					return this.establecimiento;
				}
				
			    public String id_cita;

				public String getId_cita () {
					return this.id_cita;
				}
				
			    public String tipo_doc;

				public String getTipo_doc () {
					return this.tipo_doc;
				}
				
			    public String identificador;

				public String getIdentificador () {
					return this.identificador;
				}
				
			    public String nro_doc;

				public String getNro_doc () {
					return this.nro_doc;
				}
				
			    public String nombre;

				public String getNombre () {
					return this.nombre;
				}
				
			    public String paterno;

				public String getPaterno () {
					return this.paterno;
				}
				
			    public String materno;

				public String getMaterno () {
					return this.materno;
				}
				
			    public String fecha_nac;

				public String getFecha_nac () {
					return this.fecha_nac;
				}
				
			    public String nro_hcl;

				public String getNro_hcl () {
					return this.nro_hcl;
				}
				
			    public String fichafam;

				public String getFichafam () {
					return this.fichafam;
				}
				
			    public String financiador;

				public String getFinanciador () {
					return this.financiador;
				}
				
			    public String nro_afiliacion;

				public String getNro_afiliacion () {
					return this.nro_afiliacion;
				}
				
			    public String cond_eess;

				public String getCond_eess () {
					return this.cond_eess;
				}
				
			    public String cond_serv;

				public String getCond_serv () {
					return this.cond_serv;
				}
				
			    public String tipo_edad;

				public String getTipo_edad () {
					return this.tipo_edad;
				}
				
			    public String edad_pac_ano;

				public String getEdad_pac_ano () {
					return this.edad_pac_ano;
				}
				
			    public String edad_pac_mes;

				public String getEdad_pac_mes () {
					return this.edad_pac_mes;
				}
				
			    public String edad_pac_dia;

				public String getEdad_pac_dia () {
					return this.edad_pac_dia;
				}
				
			    public String ubigeo;

				public String getUbigeo () {
					return this.ubigeo;
				}
				
			    public String domicilio;

				public String getDomicilio () {
					return this.domicilio;
				}
				
			    public String turno_atencion;

				public String getTurno_atencion () {
					return this.turno_atencion;
				}
				
			    public String genero;

				public String getGenero () {
					return this.genero;
				}
				
			    public String etnia;

				public String getEtnia () {
					return this.etnia;
				}
				
			    public String id_ciex1;

				public String getId_ciex1 () {
					return this.id_ciex1;
				}
				
			    public String id_tipdiag1;

				public String getId_tipdiag1 () {
					return this.id_tipdiag1;
				}
				
			    public String valor_lab1;

				public String getValor_lab1 () {
					return this.valor_lab1;
				}
				
			    public String id_ciex2;

				public String getId_ciex2 () {
					return this.id_ciex2;
				}
				
			    public String id_tipdiag2;

				public String getId_tipdiag2 () {
					return this.id_tipdiag2;
				}
				
			    public String valor_lab2;

				public String getValor_lab2 () {
					return this.valor_lab2;
				}
				
			    public String id_ciex3;

				public String getId_ciex3 () {
					return this.id_ciex3;
				}
				
			    public String id_tipdiag3;

				public String getId_tipdiag3 () {
					return this.id_tipdiag3;
				}
				
			    public String valor_lab3;

				public String getValor_lab3 () {
					return this.valor_lab3;
				}
				
			    public String id_ciex4;

				public String getId_ciex4 () {
					return this.id_ciex4;
				}
				
			    public String id_tipdiag4;

				public String getId_tipdiag4 () {
					return this.id_tipdiag4;
				}
				
			    public String valor_lab4;

				public String getValor_lab4 () {
					return this.valor_lab4;
				}
				
			    public String id_ciex5;

				public String getId_ciex5 () {
					return this.id_ciex5;
				}
				
			    public String id_tipdiag5;

				public String getId_tipdiag5 () {
					return this.id_tipdiag5;
				}
				
			    public String valor_lab5;

				public String getValor_lab5 () {
					return this.valor_lab5;
				}
				
			    public String id_ciex6;

				public String getId_ciex6 () {
					return this.id_ciex6;
				}
				
			    public String id_tipdiag6;

				public String getId_tipdiag6 () {
					return this.id_tipdiag6;
				}
				
			    public String valor_lab6;

				public String getValor_lab6 () {
					return this.valor_lab6;
				}
				
			    public String fecha_resultado_h;

				public String getFecha_resultado_h () {
					return this.fecha_resultado_h;
				}
				
			    public String fecha_solicitud_h;

				public String getFecha_solicitud_h () {
					return this.fecha_solicitud_h;
				}
				
			    public String num_doc_atiende;

				public String getNum_doc_atiende () {
					return this.num_doc_atiende;
				}
				
			    public String atiende;

				public String getAtiende () {
					return this.atiende;
				}
				
			    public String num_doc_registra;

				public String getNum_doc_registra () {
					return this.num_doc_registra;
				}
				
			    public String registrador;

				public String getRegistrador () {
					return this.registrador;
				}
				
			    public String fecha_registro;

				public String getFecha_registro () {
					return this.fecha_registro;
				}
				
			    public String ult_modificacion;

				public String getUlt_modificacion () {
					return this.ult_modificacion;
				}
				
			    public String peso;

				public String getPeso () {
					return this.peso;
				}
				
			    public String talla;

				public String getTalla () {
					return this.talla;
				}
				
			    public String hb;

				public String getHb () {
					return this.hb;
				}
				
			    public String pab;

				public String getPab () {
					return this.pab;
				}
				
			    public String pc;

				public String getPc () {
					return this.pc;
				}
				
			    public String icm;

				public String getIcm () {
					return this.icm;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
					this.ano = readString(dis);
					
					this.mes = readString(dis);
					
					this.dia = readString(dis);
					
					this.lote = readString(dis);
					
					this.num_pag = readString(dis);
					
					this.num_reg = readString(dis);
					
					this.servicio = readString(dis);
					
					this.disa = readString(dis);
					
					this.red = readString(dis);
					
					this.microred = readString(dis);
					
					this.renaes = readString(dis);
					
					this.establecimiento = readString(dis);
					
					this.id_cita = readString(dis);
					
					this.tipo_doc = readString(dis);
					
					this.identificador = readString(dis);
					
					this.nro_doc = readString(dis);
					
					this.nombre = readString(dis);
					
					this.paterno = readString(dis);
					
					this.materno = readString(dis);
					
					this.fecha_nac = readString(dis);
					
					this.nro_hcl = readString(dis);
					
					this.fichafam = readString(dis);
					
					this.financiador = readString(dis);
					
					this.nro_afiliacion = readString(dis);
					
					this.cond_eess = readString(dis);
					
					this.cond_serv = readString(dis);
					
					this.tipo_edad = readString(dis);
					
					this.edad_pac_ano = readString(dis);
					
					this.edad_pac_mes = readString(dis);
					
					this.edad_pac_dia = readString(dis);
					
					this.ubigeo = readString(dis);
					
					this.domicilio = readString(dis);
					
					this.turno_atencion = readString(dis);
					
					this.genero = readString(dis);
					
					this.etnia = readString(dis);
					
					this.id_ciex1 = readString(dis);
					
					this.id_tipdiag1 = readString(dis);
					
					this.valor_lab1 = readString(dis);
					
					this.id_ciex2 = readString(dis);
					
					this.id_tipdiag2 = readString(dis);
					
					this.valor_lab2 = readString(dis);
					
					this.id_ciex3 = readString(dis);
					
					this.id_tipdiag3 = readString(dis);
					
					this.valor_lab3 = readString(dis);
					
					this.id_ciex4 = readString(dis);
					
					this.id_tipdiag4 = readString(dis);
					
					this.valor_lab4 = readString(dis);
					
					this.id_ciex5 = readString(dis);
					
					this.id_tipdiag5 = readString(dis);
					
					this.valor_lab5 = readString(dis);
					
					this.id_ciex6 = readString(dis);
					
					this.id_tipdiag6 = readString(dis);
					
					this.valor_lab6 = readString(dis);
					
					this.fecha_resultado_h = readString(dis);
					
					this.fecha_solicitud_h = readString(dis);
					
					this.num_doc_atiende = readString(dis);
					
					this.atiende = readString(dis);
					
					this.num_doc_registra = readString(dis);
					
					this.registrador = readString(dis);
					
					this.fecha_registro = readString(dis);
					
					this.ult_modificacion = readString(dis);
					
					this.peso = readString(dis);
					
					this.talla = readString(dis);
					
					this.hb = readString(dis);
					
					this.pab = readString(dis);
					
					this.pc = readString(dis);
					
					this.icm = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ano,dos);
					
					// String
				
						writeString(this.mes,dos);
					
					// String
				
						writeString(this.dia,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.num_pag,dos);
					
					// String
				
						writeString(this.num_reg,dos);
					
					// String
				
						writeString(this.servicio,dos);
					
					// String
				
						writeString(this.disa,dos);
					
					// String
				
						writeString(this.red,dos);
					
					// String
				
						writeString(this.microred,dos);
					
					// String
				
						writeString(this.renaes,dos);
					
					// String
				
						writeString(this.establecimiento,dos);
					
					// String
				
						writeString(this.id_cita,dos);
					
					// String
				
						writeString(this.tipo_doc,dos);
					
					// String
				
						writeString(this.identificador,dos);
					
					// String
				
						writeString(this.nro_doc,dos);
					
					// String
				
						writeString(this.nombre,dos);
					
					// String
				
						writeString(this.paterno,dos);
					
					// String
				
						writeString(this.materno,dos);
					
					// String
				
						writeString(this.fecha_nac,dos);
					
					// String
				
						writeString(this.nro_hcl,dos);
					
					// String
				
						writeString(this.fichafam,dos);
					
					// String
				
						writeString(this.financiador,dos);
					
					// String
				
						writeString(this.nro_afiliacion,dos);
					
					// String
				
						writeString(this.cond_eess,dos);
					
					// String
				
						writeString(this.cond_serv,dos);
					
					// String
				
						writeString(this.tipo_edad,dos);
					
					// String
				
						writeString(this.edad_pac_ano,dos);
					
					// String
				
						writeString(this.edad_pac_mes,dos);
					
					// String
				
						writeString(this.edad_pac_dia,dos);
					
					// String
				
						writeString(this.ubigeo,dos);
					
					// String
				
						writeString(this.domicilio,dos);
					
					// String
				
						writeString(this.turno_atencion,dos);
					
					// String
				
						writeString(this.genero,dos);
					
					// String
				
						writeString(this.etnia,dos);
					
					// String
				
						writeString(this.id_ciex1,dos);
					
					// String
				
						writeString(this.id_tipdiag1,dos);
					
					// String
				
						writeString(this.valor_lab1,dos);
					
					// String
				
						writeString(this.id_ciex2,dos);
					
					// String
				
						writeString(this.id_tipdiag2,dos);
					
					// String
				
						writeString(this.valor_lab2,dos);
					
					// String
				
						writeString(this.id_ciex3,dos);
					
					// String
				
						writeString(this.id_tipdiag3,dos);
					
					// String
				
						writeString(this.valor_lab3,dos);
					
					// String
				
						writeString(this.id_ciex4,dos);
					
					// String
				
						writeString(this.id_tipdiag4,dos);
					
					// String
				
						writeString(this.valor_lab4,dos);
					
					// String
				
						writeString(this.id_ciex5,dos);
					
					// String
				
						writeString(this.id_tipdiag5,dos);
					
					// String
				
						writeString(this.valor_lab5,dos);
					
					// String
				
						writeString(this.id_ciex6,dos);
					
					// String
				
						writeString(this.id_tipdiag6,dos);
					
					// String
				
						writeString(this.valor_lab6,dos);
					
					// String
				
						writeString(this.fecha_resultado_h,dos);
					
					// String
				
						writeString(this.fecha_solicitud_h,dos);
					
					// String
				
						writeString(this.num_doc_atiende,dos);
					
					// String
				
						writeString(this.atiende,dos);
					
					// String
				
						writeString(this.num_doc_registra,dos);
					
					// String
				
						writeString(this.registrador,dos);
					
					// String
				
						writeString(this.fecha_registro,dos);
					
					// String
				
						writeString(this.ult_modificacion,dos);
					
					// String
				
						writeString(this.peso,dos);
					
					// String
				
						writeString(this.talla,dos);
					
					// String
				
						writeString(this.hb,dos);
					
					// String
				
						writeString(this.pab,dos);
					
					// String
				
						writeString(this.pc,dos);
					
					// String
				
						writeString(this.icm,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ano="+ano);
		sb.append(",mes="+mes);
		sb.append(",dia="+dia);
		sb.append(",lote="+lote);
		sb.append(",num_pag="+num_pag);
		sb.append(",num_reg="+num_reg);
		sb.append(",servicio="+servicio);
		sb.append(",disa="+disa);
		sb.append(",red="+red);
		sb.append(",microred="+microred);
		sb.append(",renaes="+renaes);
		sb.append(",establecimiento="+establecimiento);
		sb.append(",id_cita="+id_cita);
		sb.append(",tipo_doc="+tipo_doc);
		sb.append(",identificador="+identificador);
		sb.append(",nro_doc="+nro_doc);
		sb.append(",nombre="+nombre);
		sb.append(",paterno="+paterno);
		sb.append(",materno="+materno);
		sb.append(",fecha_nac="+fecha_nac);
		sb.append(",nro_hcl="+nro_hcl);
		sb.append(",fichafam="+fichafam);
		sb.append(",financiador="+financiador);
		sb.append(",nro_afiliacion="+nro_afiliacion);
		sb.append(",cond_eess="+cond_eess);
		sb.append(",cond_serv="+cond_serv);
		sb.append(",tipo_edad="+tipo_edad);
		sb.append(",edad_pac_ano="+edad_pac_ano);
		sb.append(",edad_pac_mes="+edad_pac_mes);
		sb.append(",edad_pac_dia="+edad_pac_dia);
		sb.append(",ubigeo="+ubigeo);
		sb.append(",domicilio="+domicilio);
		sb.append(",turno_atencion="+turno_atencion);
		sb.append(",genero="+genero);
		sb.append(",etnia="+etnia);
		sb.append(",id_ciex1="+id_ciex1);
		sb.append(",id_tipdiag1="+id_tipdiag1);
		sb.append(",valor_lab1="+valor_lab1);
		sb.append(",id_ciex2="+id_ciex2);
		sb.append(",id_tipdiag2="+id_tipdiag2);
		sb.append(",valor_lab2="+valor_lab2);
		sb.append(",id_ciex3="+id_ciex3);
		sb.append(",id_tipdiag3="+id_tipdiag3);
		sb.append(",valor_lab3="+valor_lab3);
		sb.append(",id_ciex4="+id_ciex4);
		sb.append(",id_tipdiag4="+id_tipdiag4);
		sb.append(",valor_lab4="+valor_lab4);
		sb.append(",id_ciex5="+id_ciex5);
		sb.append(",id_tipdiag5="+id_tipdiag5);
		sb.append(",valor_lab5="+valor_lab5);
		sb.append(",id_ciex6="+id_ciex6);
		sb.append(",id_tipdiag6="+id_tipdiag6);
		sb.append(",valor_lab6="+valor_lab6);
		sb.append(",fecha_resultado_h="+fecha_resultado_h);
		sb.append(",fecha_solicitud_h="+fecha_solicitud_h);
		sb.append(",num_doc_atiende="+num_doc_atiende);
		sb.append(",atiende="+atiende);
		sb.append(",num_doc_registra="+num_doc_registra);
		sb.append(",registrador="+registrador);
		sb.append(",fecha_registro="+fecha_registro);
		sb.append(",ult_modificacion="+ult_modificacion);
		sb.append(",peso="+peso);
		sb.append(",talla="+talla);
		sb.append(",hb="+hb);
		sb.append(",pab="+pab);
		sb.append(",pc="+pc);
		sb.append(",icm="+icm);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hisStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];

	
			    public String var1;

				public String getVar1 () {
					return this.var1;
				}
				
			    public String var2;

				public String getVar2 () {
					return this.var2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
					this.var1 = readString(dis);
					
					this.var2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.var1,dos);
					
					// String
				
						writeString(this.var2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("var1="+var1);
		sb.append(",var2="+var2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];

	
			    public String _Ano;

				public String get_Ano () {
					return this._Ano;
				}
				
			    public String Mes;

				public String getMes () {
					return this.Mes;
				}
				
			    public String Dia;

				public String getDia () {
					return this.Dia;
				}
				
			    public String Lote;

				public String getLote () {
					return this.Lote;
				}
				
			    public String Num_Pag;

				public String getNum_Pag () {
					return this.Num_Pag;
				}
				
			    public String Num_Reg;

				public String getNum_Reg () {
					return this.Num_Reg;
				}
				
			    public String Servicio;

				public String getServicio () {
					return this.Servicio;
				}
				
			    public String Disa;

				public String getDisa () {
					return this.Disa;
				}
				
			    public String Red;

				public String getRed () {
					return this.Red;
				}
				
			    public String MicroRed;

				public String getMicroRed () {
					return this.MicroRed;
				}
				
			    public String RENAES;

				public String getRENAES () {
					return this.RENAES;
				}
				
			    public String Establecimiento;

				public String getEstablecimiento () {
					return this.Establecimiento;
				}
				
			    public String id_cita;

				public String getId_cita () {
					return this.id_cita;
				}
				
			    public String Tipo_Doc;

				public String getTipo_Doc () {
					return this.Tipo_Doc;
				}
				
			    public String IDENTIFICADOR;

				public String getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}
				
			    public String Nro_Doc;

				public String getNro_Doc () {
					return this.Nro_Doc;
				}
				
			    public String Nombre;

				public String getNombre () {
					return this.Nombre;
				}
				
			    public String Paterno;

				public String getPaterno () {
					return this.Paterno;
				}
				
			    public String Materno;

				public String getMaterno () {
					return this.Materno;
				}
				
			    public String FECHA_NAC;

				public String getFECHA_NAC () {
					return this.FECHA_NAC;
				}
				
			    public String Nro__de_HCL;

				public String getNro__de_HCL () {
					return this.Nro__de_HCL;
				}
				
			    public String FichaFam;

				public String getFichaFam () {
					return this.FichaFam;
				}
				
			    public String Financiador;

				public String getFinanciador () {
					return this.Financiador;
				}
				
			    public String Nro_Afiliacion;

				public String getNro_Afiliacion () {
					return this.Nro_Afiliacion;
				}
				
			    public String Cond__EESS;

				public String getCond__EESS () {
					return this.Cond__EESS;
				}
				
			    public String Cond__Serv_;

				public String getCond__Serv_ () {
					return this.Cond__Serv_;
				}
				
			    public String Tipo_Edad;

				public String getTipo_Edad () {
					return this.Tipo_Edad;
				}
				
			    public String Edad_Pac__Ano_;

				public String getEdad_Pac__Ano_ () {
					return this.Edad_Pac__Ano_;
				}
				
			    public String Edad_Pac___Mes_;

				public String getEdad_Pac___Mes_ () {
					return this.Edad_Pac___Mes_;
				}
				
			    public String Edad_Pac___Dia_;

				public String getEdad_Pac___Dia_ () {
					return this.Edad_Pac___Dia_;
				}
				
			    public String Ubigeo;

				public String getUbigeo () {
					return this.Ubigeo;
				}
				
			    public String Domicilio;

				public String getDomicilio () {
					return this.Domicilio;
				}
				
			    public String Turno_atencion;

				public String getTurno_atencion () {
					return this.Turno_atencion;
				}
				
			    public String Genero;

				public String getGenero () {
					return this.Genero;
				}
				
			    public String Etnia;

				public String getEtnia () {
					return this.Etnia;
				}
				
			    public String id_ciex1;

				public String getId_ciex1 () {
					return this.id_ciex1;
				}
				
			    public String id_tipdiag1;

				public String getId_tipdiag1 () {
					return this.id_tipdiag1;
				}
				
			    public String valor_lab1;

				public String getValor_lab1 () {
					return this.valor_lab1;
				}
				
			    public String id_ciex2;

				public String getId_ciex2 () {
					return this.id_ciex2;
				}
				
			    public String id_tipdiag2;

				public String getId_tipdiag2 () {
					return this.id_tipdiag2;
				}
				
			    public String valor_lab2;

				public String getValor_lab2 () {
					return this.valor_lab2;
				}
				
			    public String id_ciex3;

				public String getId_ciex3 () {
					return this.id_ciex3;
				}
				
			    public String id_tipdiag3;

				public String getId_tipdiag3 () {
					return this.id_tipdiag3;
				}
				
			    public String valor_lab3;

				public String getValor_lab3 () {
					return this.valor_lab3;
				}
				
			    public String id_ciex4;

				public String getId_ciex4 () {
					return this.id_ciex4;
				}
				
			    public String id_tipdiag4;

				public String getId_tipdiag4 () {
					return this.id_tipdiag4;
				}
				
			    public String valor_lab4;

				public String getValor_lab4 () {
					return this.valor_lab4;
				}
				
			    public String id_ciex5;

				public String getId_ciex5 () {
					return this.id_ciex5;
				}
				
			    public String id_tipdiag5;

				public String getId_tipdiag5 () {
					return this.id_tipdiag5;
				}
				
			    public String valor_lab5;

				public String getValor_lab5 () {
					return this.valor_lab5;
				}
				
			    public String id_ciex6;

				public String getId_ciex6 () {
					return this.id_ciex6;
				}
				
			    public String id_tipdiag6;

				public String getId_tipdiag6 () {
					return this.id_tipdiag6;
				}
				
			    public String valor_lab6;

				public String getValor_lab6 () {
					return this.valor_lab6;
				}
				
			    public String FECHA_RESULTADO_H;

				public String getFECHA_RESULTADO_H () {
					return this.FECHA_RESULTADO_H;
				}
				
			    public String FECHA_SOLICITUD_H;

				public String getFECHA_SOLICITUD_H () {
					return this.FECHA_SOLICITUD_H;
				}
				
			    public String NUM_DOC_ATIENDE;

				public String getNUM_DOC_ATIENDE () {
					return this.NUM_DOC_ATIENDE;
				}
				
			    public String ATIENDE;

				public String getATIENDE () {
					return this.ATIENDE;
				}
				
			    public String NUM_DOC_REGISTRA;

				public String getNUM_DOC_REGISTRA () {
					return this.NUM_DOC_REGISTRA;
				}
				
			    public String REGISTRADOR;

				public String getREGISTRADOR () {
					return this.REGISTRADOR;
				}
				
			    public String FECHA_REGISTRO;

				public String getFECHA_REGISTRO () {
					return this.FECHA_REGISTRO;
				}
				
			    public String ULT_MODIFICACION;

				public String getULT_MODIFICACION () {
					return this.ULT_MODIFICACION;
				}
				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}
				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}
				
			    public String HB;

				public String getHB () {
					return this.HB;
				}
				
			    public String PAB;

				public String getPAB () {
					return this.PAB;
				}
				
			    public String PC;

				public String getPC () {
					return this.PC;
				}
				
			    public String ICM;

				public String getICM () {
					return this.ICM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
					this._Ano = readString(dis);
					
					this.Mes = readString(dis);
					
					this.Dia = readString(dis);
					
					this.Lote = readString(dis);
					
					this.Num_Pag = readString(dis);
					
					this.Num_Reg = readString(dis);
					
					this.Servicio = readString(dis);
					
					this.Disa = readString(dis);
					
					this.Red = readString(dis);
					
					this.MicroRed = readString(dis);
					
					this.RENAES = readString(dis);
					
					this.Establecimiento = readString(dis);
					
					this.id_cita = readString(dis);
					
					this.Tipo_Doc = readString(dis);
					
					this.IDENTIFICADOR = readString(dis);
					
					this.Nro_Doc = readString(dis);
					
					this.Nombre = readString(dis);
					
					this.Paterno = readString(dis);
					
					this.Materno = readString(dis);
					
					this.FECHA_NAC = readString(dis);
					
					this.Nro__de_HCL = readString(dis);
					
					this.FichaFam = readString(dis);
					
					this.Financiador = readString(dis);
					
					this.Nro_Afiliacion = readString(dis);
					
					this.Cond__EESS = readString(dis);
					
					this.Cond__Serv_ = readString(dis);
					
					this.Tipo_Edad = readString(dis);
					
					this.Edad_Pac__Ano_ = readString(dis);
					
					this.Edad_Pac___Mes_ = readString(dis);
					
					this.Edad_Pac___Dia_ = readString(dis);
					
					this.Ubigeo = readString(dis);
					
					this.Domicilio = readString(dis);
					
					this.Turno_atencion = readString(dis);
					
					this.Genero = readString(dis);
					
					this.Etnia = readString(dis);
					
					this.id_ciex1 = readString(dis);
					
					this.id_tipdiag1 = readString(dis);
					
					this.valor_lab1 = readString(dis);
					
					this.id_ciex2 = readString(dis);
					
					this.id_tipdiag2 = readString(dis);
					
					this.valor_lab2 = readString(dis);
					
					this.id_ciex3 = readString(dis);
					
					this.id_tipdiag3 = readString(dis);
					
					this.valor_lab3 = readString(dis);
					
					this.id_ciex4 = readString(dis);
					
					this.id_tipdiag4 = readString(dis);
					
					this.valor_lab4 = readString(dis);
					
					this.id_ciex5 = readString(dis);
					
					this.id_tipdiag5 = readString(dis);
					
					this.valor_lab5 = readString(dis);
					
					this.id_ciex6 = readString(dis);
					
					this.id_tipdiag6 = readString(dis);
					
					this.valor_lab6 = readString(dis);
					
					this.FECHA_RESULTADO_H = readString(dis);
					
					this.FECHA_SOLICITUD_H = readString(dis);
					
					this.NUM_DOC_ATIENDE = readString(dis);
					
					this.ATIENDE = readString(dis);
					
					this.NUM_DOC_REGISTRA = readString(dis);
					
					this.REGISTRADOR = readString(dis);
					
					this.FECHA_REGISTRO = readString(dis);
					
					this.ULT_MODIFICACION = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.HB = readString(dis);
					
					this.PAB = readString(dis);
					
					this.PC = readString(dis);
					
					this.ICM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._Ano,dos);
					
					// String
				
						writeString(this.Mes,dos);
					
					// String
				
						writeString(this.Dia,dos);
					
					// String
				
						writeString(this.Lote,dos);
					
					// String
				
						writeString(this.Num_Pag,dos);
					
					// String
				
						writeString(this.Num_Reg,dos);
					
					// String
				
						writeString(this.Servicio,dos);
					
					// String
				
						writeString(this.Disa,dos);
					
					// String
				
						writeString(this.Red,dos);
					
					// String
				
						writeString(this.MicroRed,dos);
					
					// String
				
						writeString(this.RENAES,dos);
					
					// String
				
						writeString(this.Establecimiento,dos);
					
					// String
				
						writeString(this.id_cita,dos);
					
					// String
				
						writeString(this.Tipo_Doc,dos);
					
					// String
				
						writeString(this.IDENTIFICADOR,dos);
					
					// String
				
						writeString(this.Nro_Doc,dos);
					
					// String
				
						writeString(this.Nombre,dos);
					
					// String
				
						writeString(this.Paterno,dos);
					
					// String
				
						writeString(this.Materno,dos);
					
					// String
				
						writeString(this.FECHA_NAC,dos);
					
					// String
				
						writeString(this.Nro__de_HCL,dos);
					
					// String
				
						writeString(this.FichaFam,dos);
					
					// String
				
						writeString(this.Financiador,dos);
					
					// String
				
						writeString(this.Nro_Afiliacion,dos);
					
					// String
				
						writeString(this.Cond__EESS,dos);
					
					// String
				
						writeString(this.Cond__Serv_,dos);
					
					// String
				
						writeString(this.Tipo_Edad,dos);
					
					// String
				
						writeString(this.Edad_Pac__Ano_,dos);
					
					// String
				
						writeString(this.Edad_Pac___Mes_,dos);
					
					// String
				
						writeString(this.Edad_Pac___Dia_,dos);
					
					// String
				
						writeString(this.Ubigeo,dos);
					
					// String
				
						writeString(this.Domicilio,dos);
					
					// String
				
						writeString(this.Turno_atencion,dos);
					
					// String
				
						writeString(this.Genero,dos);
					
					// String
				
						writeString(this.Etnia,dos);
					
					// String
				
						writeString(this.id_ciex1,dos);
					
					// String
				
						writeString(this.id_tipdiag1,dos);
					
					// String
				
						writeString(this.valor_lab1,dos);
					
					// String
				
						writeString(this.id_ciex2,dos);
					
					// String
				
						writeString(this.id_tipdiag2,dos);
					
					// String
				
						writeString(this.valor_lab2,dos);
					
					// String
				
						writeString(this.id_ciex3,dos);
					
					// String
				
						writeString(this.id_tipdiag3,dos);
					
					// String
				
						writeString(this.valor_lab3,dos);
					
					// String
				
						writeString(this.id_ciex4,dos);
					
					// String
				
						writeString(this.id_tipdiag4,dos);
					
					// String
				
						writeString(this.valor_lab4,dos);
					
					// String
				
						writeString(this.id_ciex5,dos);
					
					// String
				
						writeString(this.id_tipdiag5,dos);
					
					// String
				
						writeString(this.valor_lab5,dos);
					
					// String
				
						writeString(this.id_ciex6,dos);
					
					// String
				
						writeString(this.id_tipdiag6,dos);
					
					// String
				
						writeString(this.valor_lab6,dos);
					
					// String
				
						writeString(this.FECHA_RESULTADO_H,dos);
					
					// String
				
						writeString(this.FECHA_SOLICITUD_H,dos);
					
					// String
				
						writeString(this.NUM_DOC_ATIENDE,dos);
					
					// String
				
						writeString(this.ATIENDE,dos);
					
					// String
				
						writeString(this.NUM_DOC_REGISTRA,dos);
					
					// String
				
						writeString(this.REGISTRADOR,dos);
					
					// String
				
						writeString(this.FECHA_REGISTRO,dos);
					
					// String
				
						writeString(this.ULT_MODIFICACION,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.HB,dos);
					
					// String
				
						writeString(this.PAB,dos);
					
					// String
				
						writeString(this.PC,dos);
					
					// String
				
						writeString(this.ICM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_Ano="+_Ano);
		sb.append(",Mes="+Mes);
		sb.append(",Dia="+Dia);
		sb.append(",Lote="+Lote);
		sb.append(",Num_Pag="+Num_Pag);
		sb.append(",Num_Reg="+Num_Reg);
		sb.append(",Servicio="+Servicio);
		sb.append(",Disa="+Disa);
		sb.append(",Red="+Red);
		sb.append(",MicroRed="+MicroRed);
		sb.append(",RENAES="+RENAES);
		sb.append(",Establecimiento="+Establecimiento);
		sb.append(",id_cita="+id_cita);
		sb.append(",Tipo_Doc="+Tipo_Doc);
		sb.append(",IDENTIFICADOR="+IDENTIFICADOR);
		sb.append(",Nro_Doc="+Nro_Doc);
		sb.append(",Nombre="+Nombre);
		sb.append(",Paterno="+Paterno);
		sb.append(",Materno="+Materno);
		sb.append(",FECHA_NAC="+FECHA_NAC);
		sb.append(",Nro__de_HCL="+Nro__de_HCL);
		sb.append(",FichaFam="+FichaFam);
		sb.append(",Financiador="+Financiador);
		sb.append(",Nro_Afiliacion="+Nro_Afiliacion);
		sb.append(",Cond__EESS="+Cond__EESS);
		sb.append(",Cond__Serv_="+Cond__Serv_);
		sb.append(",Tipo_Edad="+Tipo_Edad);
		sb.append(",Edad_Pac__Ano_="+Edad_Pac__Ano_);
		sb.append(",Edad_Pac___Mes_="+Edad_Pac___Mes_);
		sb.append(",Edad_Pac___Dia_="+Edad_Pac___Dia_);
		sb.append(",Ubigeo="+Ubigeo);
		sb.append(",Domicilio="+Domicilio);
		sb.append(",Turno_atencion="+Turno_atencion);
		sb.append(",Genero="+Genero);
		sb.append(",Etnia="+Etnia);
		sb.append(",id_ciex1="+id_ciex1);
		sb.append(",id_tipdiag1="+id_tipdiag1);
		sb.append(",valor_lab1="+valor_lab1);
		sb.append(",id_ciex2="+id_ciex2);
		sb.append(",id_tipdiag2="+id_tipdiag2);
		sb.append(",valor_lab2="+valor_lab2);
		sb.append(",id_ciex3="+id_ciex3);
		sb.append(",id_tipdiag3="+id_tipdiag3);
		sb.append(",valor_lab3="+valor_lab3);
		sb.append(",id_ciex4="+id_ciex4);
		sb.append(",id_tipdiag4="+id_tipdiag4);
		sb.append(",valor_lab4="+valor_lab4);
		sb.append(",id_ciex5="+id_ciex5);
		sb.append(",id_tipdiag5="+id_tipdiag5);
		sb.append(",valor_lab5="+valor_lab5);
		sb.append(",id_ciex6="+id_ciex6);
		sb.append(",id_tipdiag6="+id_tipdiag6);
		sb.append(",valor_lab6="+valor_lab6);
		sb.append(",FECHA_RESULTADO_H="+FECHA_RESULTADO_H);
		sb.append(",FECHA_SOLICITUD_H="+FECHA_SOLICITUD_H);
		sb.append(",NUM_DOC_ATIENDE="+NUM_DOC_ATIENDE);
		sb.append(",ATIENDE="+ATIENDE);
		sb.append(",NUM_DOC_REGISTRA="+NUM_DOC_REGISTRA);
		sb.append(",REGISTRADOR="+REGISTRADOR);
		sb.append(",FECHA_REGISTRO="+FECHA_REGISTRO);
		sb.append(",ULT_MODIFICACION="+ULT_MODIFICACION);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",HB="+HB);
		sb.append(",PAB="+PAB);
		sb.append(",PC="+PC);
		sb.append(",ICM="+ICM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_pundig;

				public int getId_pundig () {
					return this.id_pundig;
				}
				
			    public String pundig_nom;

				public String getPundig_nom () {
					return this.pundig_nom;
				}
				
			    public String pundig_act;

				public String getPundig_act () {
					return this.pundig_act;
				}
				
			    public String punto_idodsis;

				public String getPunto_idodsis () {
					return this.punto_idodsis;
				}
				
			    public String punto_base;

				public String getPunto_base () {
					return this.punto_base;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_pundig;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id_pundig != other.id_pundig)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id_pundig = this.id_pundig;
	            other.pundig_nom = this.pundig_nom;
	            other.pundig_act = this.pundig_act;
	            other.punto_idodsis = this.punto_idodsis;
	            other.punto_base = this.punto_base;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id_pundig = this.id_pundig;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
			        this.id_pundig = dis.readInt();
					
					this.pundig_nom = readString(dis);
					
					this.pundig_act = readString(dis);
					
					this.punto_idodsis = readString(dis);
					
					this.punto_base = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_pundig);
					
					// String
				
						writeString(this.pundig_nom,dos);
					
					// String
				
						writeString(this.pundig_act,dos);
					
					// String
				
						writeString(this.punto_idodsis,dos);
					
					// String
				
						writeString(this.punto_base,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_pundig="+String.valueOf(id_pundig));
		sb.append(",pundig_nom="+pundig_nom);
		sb.append(",pundig_act="+pundig_act);
		sb.append(",punto_idodsis="+punto_idodsis);
		sb.append(",punto_base="+punto_base);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_pundig, other.id_pundig);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row2Struct row3 = row2;
row1Struct row1 = new row1Struct();
hisStruct his = new hisStruct();
row4Struct row4 = new row4Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

				
			int NB_ITERATE_tFileList_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = context.bddiresa_Login;
					
					
					
	final String decryptedPassword_tDBInput_1 = context.bddiresa_Password; 
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + context.bddiresa_Server + ":" + context.bddiresa_Port + "/" + context.bddiresa_Database + "?" + context.bddiresa_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `pun$dig`.`id_pundig`, \n  `pun$dig`.`pundig_nom`, \n  `pun$dig`.`pundig_act`, \n  `pun$dig`.`punto_idodsis`, \n "
+" `pun$dig`.`punto_base`\nFROM `pun$dig`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.id_pundig = 0;
							} else {
		                          
            row2.id_pundig = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.pundig_nom = null;
							} else {
	                         		
        	row2.pundig_nom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.pundig_act = null;
							} else {
	                         		
        	row2.pundig_act = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.punto_idodsis = null;
							} else {
	                         		
        	row2.punto_idodsis = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.punto_base = null;
							} else {
	                         		
        	row2.punto_base = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.id_pundig)							
				);


							  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.pundig_nom != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.pundig_nom)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.pundig_act != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.pundig_act)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.punto_idodsis != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.punto_idodsis)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.punto_base != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.punto_base)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = row2;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			//row3
			//row3


			
				
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				}
				
				
				
			

		

globalMap.put("idpunto", String.valueOf(row3.id_pundig));
globalMap.put("base", row3.punto_base);
globalMap.put("directorio", "D:\\Proyectos\\dwh\\build\\web\\archivos\\"+((String)globalMap.get("idpunto"))+"\\");

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	NB_ITERATE_tFileList_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("his", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("sihis", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileList_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = "D:\\Proyectos\\dwh\\build\\web\\archivos\\"+((String)globalMap.get("idpunto"))+"\\";
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.csv");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("his", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("sihis", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row4"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("D:/out.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("his"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "his_his";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = context.bddiresa_AdditionalParams;
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + context.bddiresa_Server + ":" + context.bddiresa_Port + "/" + ((String)globalMap.get("base")) + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = context.bddiresa_AdditionalParams;
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + context.bddiresa_Server + ":" + context.bddiresa_Port + "/" + ((String)globalMap.get("base")) + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = context.bddiresa_Login;
		

		
	final String decryptedPassword_tDBOutput_1 = context.bddiresa_Password; 

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	

		        String insert_tDBOutput_1 = "INSERT INTO `" + "his_his" + "` (`año`,`mes`,`dia`,`lote`,`num_pag`,`num_reg`,`servicio`,`disa`,`red`,`microred`,`renaes`,`establecimiento`,`id_cita`,`tipo_doc`,`identificador`,`nro_doc`,`nombre`,`paterno`,`materno`,`fecha_nac`,`nro_hcl`,`fichafam`,`financiador`,`nro_afiliacion`,`cond_eess`,`cond_serv`,`tipo_edad`,`edad_pac_año`,`edad_pac_mes`,`edad_pac_día`,`ubigeo`,`domicilio`,`turno_atención`,`genero`,`etnia`,`id_ciex1`,`id_tipdiag1`,`valor_lab1`,`id_ciex2`,`id_tipdiag2`,`valor_lab2`,`id_ciex3`,`id_tipdiag3`,`valor_lab3`,`id_ciex4`,`id_tipdiag4`,`valor_lab4`,`id_ciex5`,`id_tipdiag5`,`valor_lab5`,`id_ciex6`,`id_tipdiag6`,`valor_lab6`,`fecha_resultado_h`,`fecha_solicitud_h`,`num_doc_atiende`,`atiende`,`num_doc_registra`,`registrador`,`fecha_registro`,`ult_modificacion`,`peso`,`talla`,`hb`,`pab`,`pc`,`icm`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				    

                        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);



 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("out1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tSetGlobalVar_2 = 0;
		

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String var1;
	String var2;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
hisStruct his_tmp = new hisStruct();
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEDIRECTORY"))+"\\"+((String)globalMap.get("tFileList_1_CURRENT_FILE"))/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1._Ano = null;
					
							row1.Mes = null;
					
							row1.Dia = null;
					
							row1.Lote = null;
					
							row1.Num_Pag = null;
					
							row1.Num_Reg = null;
					
							row1.Servicio = null;
					
							row1.Disa = null;
					
							row1.Red = null;
					
							row1.MicroRed = null;
					
							row1.RENAES = null;
					
							row1.Establecimiento = null;
					
							row1.id_cita = null;
					
							row1.Tipo_Doc = null;
					
							row1.IDENTIFICADOR = null;
					
							row1.Nro_Doc = null;
					
							row1.Nombre = null;
					
							row1.Paterno = null;
					
							row1.Materno = null;
					
							row1.FECHA_NAC = null;
					
							row1.Nro__de_HCL = null;
					
							row1.FichaFam = null;
					
							row1.Financiador = null;
					
							row1.Nro_Afiliacion = null;
					
							row1.Cond__EESS = null;
					
							row1.Cond__Serv_ = null;
					
							row1.Tipo_Edad = null;
					
							row1.Edad_Pac__Ano_ = null;
					
							row1.Edad_Pac___Mes_ = null;
					
							row1.Edad_Pac___Dia_ = null;
					
							row1.Ubigeo = null;
					
							row1.Domicilio = null;
					
							row1.Turno_atencion = null;
					
							row1.Genero = null;
					
							row1.Etnia = null;
					
							row1.id_ciex1 = null;
					
							row1.id_tipdiag1 = null;
					
							row1.valor_lab1 = null;
					
							row1.id_ciex2 = null;
					
							row1.id_tipdiag2 = null;
					
							row1.valor_lab2 = null;
					
							row1.id_ciex3 = null;
					
							row1.id_tipdiag3 = null;
					
							row1.valor_lab3 = null;
					
							row1.id_ciex4 = null;
					
							row1.id_tipdiag4 = null;
					
							row1.valor_lab4 = null;
					
							row1.id_ciex5 = null;
					
							row1.id_tipdiag5 = null;
					
							row1.valor_lab5 = null;
					
							row1.id_ciex6 = null;
					
							row1.id_tipdiag6 = null;
					
							row1.valor_lab6 = null;
					
							row1.FECHA_RESULTADO_H = null;
					
							row1.FECHA_SOLICITUD_H = null;
					
							row1.NUM_DOC_ATIENDE = null;
					
							row1.ATIENDE = null;
					
							row1.NUM_DOC_REGISTRA = null;
					
							row1.REGISTRADOR = null;
					
							row1.FECHA_REGISTRO = null;
					
							row1.ULT_MODIFICACION = null;
					
							row1.PESO = null;
					
							row1.TALLA = null;
					
							row1.HB = null;
					
							row1.PAB = null;
					
							row1.PC = null;
					
							row1.ICM = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1._Ano = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1._Ano = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Mes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Mes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Dia = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Dia = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Lote = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Lote = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Num_Pag = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Num_Pag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Num_Reg = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Num_Reg = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Servicio = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Servicio = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Disa = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Disa = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Red = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Red = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.MicroRed = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.MicroRed = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.RENAES = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.RENAES = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Establecimiento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Establecimiento = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_cita = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_cita = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Tipo_Doc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Tipo_Doc = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IDENTIFICADOR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IDENTIFICADOR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Nro_Doc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Nro_Doc = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Nombre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Nombre = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Paterno = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Paterno = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Materno = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Materno = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_NAC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_NAC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Nro__de_HCL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Nro__de_HCL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FichaFam = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FichaFam = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Financiador = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Financiador = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Nro_Afiliacion = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Nro_Afiliacion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Cond__EESS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Cond__EESS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Cond__Serv_ = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Cond__Serv_ = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Tipo_Edad = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Tipo_Edad = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Edad_Pac__Ano_ = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Edad_Pac__Ano_ = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Edad_Pac___Mes_ = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Edad_Pac___Mes_ = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Edad_Pac___Dia_ = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Edad_Pac___Dia_ = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Ubigeo = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Ubigeo = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Domicilio = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Domicilio = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Turno_atencion = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Turno_atencion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Genero = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Genero = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Etnia = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Etnia = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ciex1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ciex1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_tipdiag1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_tipdiag1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.valor_lab1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.valor_lab1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ciex2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ciex2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_tipdiag2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_tipdiag2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.valor_lab2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.valor_lab2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ciex3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ciex3 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_tipdiag3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_tipdiag3 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.valor_lab3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.valor_lab3 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ciex4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ciex4 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_tipdiag4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_tipdiag4 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.valor_lab4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.valor_lab4 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ciex5 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ciex5 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_tipdiag5 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_tipdiag5 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.valor_lab5 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.valor_lab5 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ciex6 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ciex6 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_tipdiag6 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_tipdiag6 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.valor_lab6 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.valor_lab6 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_RESULTADO_H = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_RESULTADO_H = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_SOLICITUD_H = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_SOLICITUD_H = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NUM_DOC_ATIENDE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NUM_DOC_ATIENDE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ATIENDE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ATIENDE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NUM_DOC_REGISTRA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NUM_DOC_REGISTRA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.REGISTRADOR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.REGISTRADOR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_REGISTRO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_REGISTRO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ULT_MODIFICACION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ULT_MODIFICACION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.PESO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.PESO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TALLA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TALLA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.PAB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.PAB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.PC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.PC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ICM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ICM = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = row1._Ano ;
Var.var2 = row1.Mes ;// ###############################
        // ###############################
        // # Output tables

his = null;
out1 = null;


// # Output table : 'his'
his_tmp.ano = row1._Ano ;
his_tmp.mes = row1.Mes ;
his_tmp.dia = row1.Dia ;
his_tmp.lote = row1.Lote ;
his_tmp.num_pag = row1.Num_Pag ;
his_tmp.num_reg = row1.Num_Reg ;
his_tmp.servicio = row1.Servicio ;
his_tmp.disa = row1.Disa ;
his_tmp.red = row1.Red ;
his_tmp.microred = row1.MicroRed ;
his_tmp.renaes = row1.RENAES ;
his_tmp.establecimiento = row1.Establecimiento ;
his_tmp.id_cita = row1.id_cita ;
his_tmp.tipo_doc = row1.Tipo_Doc ;
his_tmp.identificador = row1.IDENTIFICADOR ;
his_tmp.nro_doc = row1.Nro_Doc ;
his_tmp.nombre = row1.Nombre ;
his_tmp.paterno = row1.Paterno ;
his_tmp.materno = row1.Materno ;
his_tmp.fecha_nac = row1.FECHA_NAC ;
his_tmp.nro_hcl = row1.Nro__de_HCL ;
his_tmp.fichafam = row1.FichaFam ;
his_tmp.financiador = row1.Financiador ;
his_tmp.nro_afiliacion = row1.Nro_Afiliacion ;
his_tmp.cond_eess = row1.Cond__EESS ;
his_tmp.cond_serv = row1.Cond__Serv_ ;
his_tmp.tipo_edad = row1.Tipo_Edad ;
his_tmp.edad_pac_ano = row1.Edad_Pac__Ano_ ;
his_tmp.edad_pac_mes = row1.Edad_Pac___Mes_ ;
his_tmp.edad_pac_dia = row1.Edad_Pac___Dia_ ;
his_tmp.ubigeo = row1.Ubigeo ;
his_tmp.domicilio = row1.Domicilio ;
his_tmp.turno_atencion = row1.Turno_atencion ;
his_tmp.genero = row1.Genero ;
his_tmp.etnia = row1.Etnia ;
his_tmp.id_ciex1 = row1.id_ciex1 ;
his_tmp.id_tipdiag1 = row1.id_tipdiag1 ;
his_tmp.valor_lab1 = row1.valor_lab1 ;
his_tmp.id_ciex2 = row1.id_ciex2 ;
his_tmp.id_tipdiag2 = row1.id_tipdiag2 ;
his_tmp.valor_lab2 = row1.valor_lab2 ;
his_tmp.id_ciex3 = row1.id_ciex3 ;
his_tmp.id_tipdiag3 = row1.id_tipdiag3 ;
his_tmp.valor_lab3 = row1.valor_lab3 ;
his_tmp.id_ciex4 = row1.id_ciex4 ;
his_tmp.id_tipdiag4 = row1.id_tipdiag4 ;
his_tmp.valor_lab4 = row1.valor_lab4 ;
his_tmp.id_ciex5 = row1.id_ciex5 ;
his_tmp.id_tipdiag5 = row1.id_tipdiag5 ;
his_tmp.valor_lab5 = row1.valor_lab5 ;
his_tmp.id_ciex6 = row1.id_ciex6 ;
his_tmp.id_tipdiag6 = row1.id_tipdiag6 ;
his_tmp.valor_lab6 = row1.valor_lab6 ;
his_tmp.fecha_resultado_h = row1.FECHA_RESULTADO_H ;
his_tmp.fecha_solicitud_h = row1.FECHA_SOLICITUD_H ;
his_tmp.num_doc_atiende = row1.NUM_DOC_ATIENDE ;
his_tmp.atiende = row1.ATIENDE ;
his_tmp.num_doc_registra = row1.NUM_DOC_REGISTRA ;
his_tmp.registrador = row1.REGISTRADOR ;
his_tmp.fecha_registro = row1.FECHA_REGISTRO ;
his_tmp.ult_modificacion = row1.ULT_MODIFICACION ;
his_tmp.peso = row1.PESO ;
his_tmp.talla = row1.TALLA ;
his_tmp.hb = row1.HB ;
his_tmp.pab = row1.PAB ;
his_tmp.pc = row1.PC ;
his_tmp.icm = row1.ICM ;
his = his_tmp;

// # Output table : 'out1'
out1_tmp.var1 = Var.var1 ;
out1_tmp.var2 = Var.var2 ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "his"
if(his != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//his
			//his


			
				
				if(execStat){
					runStat.updateStatOnConnection("his"+iterateId,1, 1);
				}
				
				
				
			

		



            row4 = null;
        whetherReject_tDBOutput_1 = false;
                        if(his.ano == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, his.ano);
}

                        if(his.mes == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, his.mes);
}

                        if(his.dia == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, his.dia);
}

                        if(his.lote == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, his.lote);
}

                        if(his.num_pag == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, his.num_pag);
}

                        if(his.num_reg == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, his.num_reg);
}

                        if(his.servicio == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, his.servicio);
}

                        if(his.disa == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, his.disa);
}

                        if(his.red == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, his.red);
}

                        if(his.microred == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, his.microred);
}

                        if(his.renaes == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, his.renaes);
}

                        if(his.establecimiento == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, his.establecimiento);
}

                        if(his.id_cita == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, his.id_cita);
}

                        if(his.tipo_doc == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, his.tipo_doc);
}

                        if(his.identificador == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, his.identificador);
}

                        if(his.nro_doc == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, his.nro_doc);
}

                        if(his.nombre == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, his.nombre);
}

                        if(his.paterno == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, his.paterno);
}

                        if(his.materno == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, his.materno);
}

                        if(his.fecha_nac == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, his.fecha_nac);
}

                        if(his.nro_hcl == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, his.nro_hcl);
}

                        if(his.fichafam == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, his.fichafam);
}

                        if(his.financiador == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, his.financiador);
}

                        if(his.nro_afiliacion == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, his.nro_afiliacion);
}

                        if(his.cond_eess == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, his.cond_eess);
}

                        if(his.cond_serv == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, his.cond_serv);
}

                        if(his.tipo_edad == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, his.tipo_edad);
}

                        if(his.edad_pac_ano == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, his.edad_pac_ano);
}

                        if(his.edad_pac_mes == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, his.edad_pac_mes);
}

                        if(his.edad_pac_dia == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, his.edad_pac_dia);
}

                        if(his.ubigeo == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, his.ubigeo);
}

                        if(his.domicilio == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, his.domicilio);
}

                        if(his.turno_atencion == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, his.turno_atencion);
}

                        if(his.genero == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, his.genero);
}

                        if(his.etnia == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, his.etnia);
}

                        if(his.id_ciex1 == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, his.id_ciex1);
}

                        if(his.id_tipdiag1 == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, his.id_tipdiag1);
}

                        if(his.valor_lab1 == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, his.valor_lab1);
}

                        if(his.id_ciex2 == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, his.id_ciex2);
}

                        if(his.id_tipdiag2 == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, his.id_tipdiag2);
}

                        if(his.valor_lab2 == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, his.valor_lab2);
}

                        if(his.id_ciex3 == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, his.id_ciex3);
}

                        if(his.id_tipdiag3 == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(43, his.id_tipdiag3);
}

                        if(his.valor_lab3 == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(44, his.valor_lab3);
}

                        if(his.id_ciex4 == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, his.id_ciex4);
}

                        if(his.id_tipdiag4 == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, his.id_tipdiag4);
}

                        if(his.valor_lab4 == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, his.valor_lab4);
}

                        if(his.id_ciex5 == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(48, his.id_ciex5);
}

                        if(his.id_tipdiag5 == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(49, his.id_tipdiag5);
}

                        if(his.valor_lab5 == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, his.valor_lab5);
}

                        if(his.id_ciex6 == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, his.id_ciex6);
}

                        if(his.id_tipdiag6 == null) {
pstmt_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(52, his.id_tipdiag6);
}

                        if(his.valor_lab6 == null) {
pstmt_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(53, his.valor_lab6);
}

                        if(his.fecha_resultado_h == null) {
pstmt_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(54, his.fecha_resultado_h);
}

                        if(his.fecha_solicitud_h == null) {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(55, his.fecha_solicitud_h);
}

                        if(his.num_doc_atiende == null) {
pstmt_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(56, his.num_doc_atiende);
}

                        if(his.atiende == null) {
pstmt_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(57, his.atiende);
}

                        if(his.num_doc_registra == null) {
pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(58, his.num_doc_registra);
}

                        if(his.registrador == null) {
pstmt_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(59, his.registrador);
}

                        if(his.fecha_registro == null) {
pstmt_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(60, his.fecha_registro);
}

                        if(his.ult_modificacion == null) {
pstmt_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(61, his.ult_modificacion);
}

                        if(his.peso == null) {
pstmt_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(62, his.peso);
}

                        if(his.talla == null) {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(63, his.talla);
}

                        if(his.hb == null) {
pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(64, his.hb);
}

                        if(his.pab == null) {
pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(65, his.pab);
}

                        if(his.pc == null) {
pstmt_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(66, his.pc);
}

                        if(his.icm == null) {
pstmt_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(67, his.icm);
}

                try {
                    nb_line_tDBOutput_1++;
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmt_tDBOutput_1.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                            row4 = new row4Struct();
                                row4.ano = his.ano;
                                row4.mes = his.mes;
                                row4.dia = his.dia;
                                row4.lote = his.lote;
                                row4.num_pag = his.num_pag;
                                row4.num_reg = his.num_reg;
                                row4.servicio = his.servicio;
                                row4.disa = his.disa;
                                row4.red = his.red;
                                row4.microred = his.microred;
                                row4.renaes = his.renaes;
                                row4.establecimiento = his.establecimiento;
                                row4.id_cita = his.id_cita;
                                row4.tipo_doc = his.tipo_doc;
                                row4.identificador = his.identificador;
                                row4.nro_doc = his.nro_doc;
                                row4.nombre = his.nombre;
                                row4.paterno = his.paterno;
                                row4.materno = his.materno;
                                row4.fecha_nac = his.fecha_nac;
                                row4.nro_hcl = his.nro_hcl;
                                row4.fichafam = his.fichafam;
                                row4.financiador = his.financiador;
                                row4.nro_afiliacion = his.nro_afiliacion;
                                row4.cond_eess = his.cond_eess;
                                row4.cond_serv = his.cond_serv;
                                row4.tipo_edad = his.tipo_edad;
                                row4.edad_pac_ano = his.edad_pac_ano;
                                row4.edad_pac_mes = his.edad_pac_mes;
                                row4.edad_pac_dia = his.edad_pac_dia;
                                row4.ubigeo = his.ubigeo;
                                row4.domicilio = his.domicilio;
                                row4.turno_atencion = his.turno_atencion;
                                row4.genero = his.genero;
                                row4.etnia = his.etnia;
                                row4.id_ciex1 = his.id_ciex1;
                                row4.id_tipdiag1 = his.id_tipdiag1;
                                row4.valor_lab1 = his.valor_lab1;
                                row4.id_ciex2 = his.id_ciex2;
                                row4.id_tipdiag2 = his.id_tipdiag2;
                                row4.valor_lab2 = his.valor_lab2;
                                row4.id_ciex3 = his.id_ciex3;
                                row4.id_tipdiag3 = his.id_tipdiag3;
                                row4.valor_lab3 = his.valor_lab3;
                                row4.id_ciex4 = his.id_ciex4;
                                row4.id_tipdiag4 = his.id_tipdiag4;
                                row4.valor_lab4 = his.valor_lab4;
                                row4.id_ciex5 = his.id_ciex5;
                                row4.id_tipdiag5 = his.id_tipdiag5;
                                row4.valor_lab5 = his.valor_lab5;
                                row4.id_ciex6 = his.id_ciex6;
                                row4.id_tipdiag6 = his.id_tipdiag6;
                                row4.valor_lab6 = his.valor_lab6;
                                row4.fecha_resultado_h = his.fecha_resultado_h;
                                row4.fecha_solicitud_h = his.fecha_solicitud_h;
                                row4.num_doc_atiende = his.num_doc_atiende;
                                row4.atiende = his.atiende;
                                row4.num_doc_registra = his.num_doc_registra;
                                row4.registrador = his.registrador;
                                row4.fecha_registro = his.fecha_registro;
                                row4.ult_modificacion = his.ult_modificacion;
                                row4.peso = his.peso;
                                row4.talla = his.talla;
                                row4.hb = his.hb;
                                row4.pab = his.pab;
                                row4.pc = his.pc;
                                row4.icm = his.icm;
                            rejectedCount_tDBOutput_1 =  rejectedCount_tDBOutput_1+ 1;
                            row4.errorCode = ((java.sql.SQLException)e).getSQLState();
                            row4.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
                }
            if(!whetherReject_tDBOutput_1) {
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row4
			//row4


			
				
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				}
				
				
				
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row4.ano != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.ano
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.mes != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.mes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.dia != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.dia
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.lote != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.lote
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.num_pag != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.num_pag
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.num_reg != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.num_reg
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.servicio != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.servicio
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.disa != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.disa
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.red != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.red
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.microred != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.microred
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.renaes != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.renaes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.establecimiento != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.establecimiento
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_cita != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_cita
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.tipo_doc != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.tipo_doc
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.identificador != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.identificador
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.nro_doc != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.nro_doc
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.nombre != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.nombre
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.paterno != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.paterno
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.materno != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.materno
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.fecha_nac != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.fecha_nac
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.nro_hcl != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.nro_hcl
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.fichafam != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.fichafam
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.financiador != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.financiador
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.nro_afiliacion != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.nro_afiliacion
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.cond_eess != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.cond_eess
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.cond_serv != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.cond_serv
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.tipo_edad != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.tipo_edad
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.edad_pac_ano != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.edad_pac_ano
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.edad_pac_mes != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.edad_pac_mes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.edad_pac_dia != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.edad_pac_dia
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.ubigeo != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.ubigeo
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.domicilio != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.domicilio
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.turno_atencion != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.turno_atencion
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.genero != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.genero
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.etnia != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.etnia
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ciex1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ciex1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_tipdiag1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_tipdiag1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.valor_lab1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.valor_lab1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ciex2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ciex2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_tipdiag2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_tipdiag2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.valor_lab2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.valor_lab2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ciex3 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ciex3
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_tipdiag3 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_tipdiag3
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.valor_lab3 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.valor_lab3
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ciex4 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ciex4
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_tipdiag4 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_tipdiag4
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.valor_lab4 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.valor_lab4
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ciex5 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ciex5
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_tipdiag5 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_tipdiag5
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.valor_lab5 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.valor_lab5
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ciex6 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ciex6
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_tipdiag6 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_tipdiag6
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.valor_lab6 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.valor_lab6
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.fecha_resultado_h != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.fecha_resultado_h
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.fecha_solicitud_h != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.fecha_solicitud_h
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.num_doc_atiende != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.num_doc_atiende
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.atiende != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.atiende
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.num_doc_registra != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.num_doc_registra
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.registrador != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.registrador
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.fecha_registro != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.fecha_registro
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.ult_modificacion != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.ult_modificacion
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.peso != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.peso
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.talla != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.talla
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.hb != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.hb
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.pab != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.pab
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.pc != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.pc
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.icm != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.icm
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.errorCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.errorCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.errorMessage != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.errorMessage
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "his"




// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

			//out1
			//out1


			
				
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				}
				
				
				
			

		

globalMap.put("anio", out1.var1);
globalMap.put("mes", out1.var2);

 


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("his"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row4"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */







	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("out1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());




/**
 * [tSetGlobalVar_2 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileList_1);
						}				
					




	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */







	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */







	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class sihisStruct implements routines.system.IPersistableRow<sihisStruct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];

	
			    public String programa;

				public String getPrograma () {
					return this.programa;
				}
				
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				
			    public String mes;

				public String getMes () {
					return this.mes;
				}
				
			    public String cantidad;

				public String getCantidad () {
					return this.cantidad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
					this.programa = readString(dis);
					
					this.ano = readString(dis);
					
					this.mes = readString(dis);
					
					this.cantidad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.programa,dos);
					
					// String
				
						writeString(this.ano,dos);
					
					// String
				
						writeString(this.mes,dos);
					
					// String
				
						writeString(this.cantidad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("programa="+programa);
		sb.append(",ano="+ano);
		sb.append(",mes="+mes);
		sb.append(",cantidad="+cantidad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sihisStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];
    static byte[] commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[0];

	
			    public String programa;

				public String getPrograma () {
					return this.programa;
				}
				
			    public String anio;

				public String getAnio () {
					return this.anio;
				}
				
			    public String mes;

				public String getMes () {
					return this.mes;
				}
				
			    public Integer cantidad;

				public Integer getCantidad () {
					return this.cantidad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length) {
				if(length < 1024 && commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis.length == 0) {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[1024];
				} else {
   					commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length);
			strReturn = new String(commonByteArray_ETL_INDICADORES_DIRESA_GuardarTramasHis, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ETL_INDICADORES_DIRESA_GuardarTramasHis) {

        	try {

        		int length = 0;
		
					this.programa = readString(dis);
					
					this.anio = readString(dis);
					
					this.mes = readString(dis);
					
						this.cantidad = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.programa,dos);
					
					// String
				
						writeString(this.anio,dos);
					
					// String
				
						writeString(this.mes,dos);
					
					// Integer
				
						writeInteger(this.cantidad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("programa="+programa);
		sb.append(",anio="+anio);
		sb.append(",mes="+mes);
		sb.append(",cantidad="+String.valueOf(cantidad));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
sihisStruct sihis = new sihisStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("sihis"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		






int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "sis_his";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
		String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
		String url_tDBOutput_2 = null;
		if(dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
			url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + ((String)globalMap.get("base")) + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_2 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + ((String)globalMap.get("base")) + "?" + properties_tDBOutput_2;
		}
		String driverClass_tDBOutput_2 = "com.mysql.jdbc.Driver";
		
		String dbUser_tDBOutput_2 = "root";
		

		 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[9K1sSejIRsNm0i4HT/HUxg==]");

		String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
		java.lang.Class.forName(driverClass_tDBOutput_2);
		
		conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
		
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 1;
        int commitCounter_tDBOutput_2 = 0;

int count_tDBOutput_2=0;
    	

				String insert_tDBOutput_2 = "INSERT INTO `" + "sis_his" + "` (`programa`,`año`,`mes`,`cantidad`) VALUES (?,?,?,?)";
		        int batchSize_tDBOutput_2 = 100;
	   			int batchSizeCounter_tDBOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
		        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row5"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sihisStruct sihis_tmp = new sihisStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row5.programa = "HIS";
    	            	        	            	
    	            		row5.anio = ((String)globalMap.get("anio"));
    	            	        	            	
    	            		row5.mes = ((String)globalMap.get("mes"));
    	            	        	            	
    	            		row5.cantidad = ((Integer)globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row5
			//row5


			
				
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sihis = null;


// # Output table : 'sihis'
sihis_tmp.programa = row5.programa ;
sihis_tmp.ano = row5.anio ;
sihis_tmp.mes = row5.mes ;
sihis_tmp.cantidad = String.valueOf(row5.cantidad ) ;
sihis = sihis_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sihis"
if(sihis != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//sihis
			//sihis


			
				
				if(execStat){
					runStat.updateStatOnConnection("sihis"+iterateId,1, 1);
				}
				
				
				
			

		



        whetherReject_tDBOutput_2 = false;
                            if(sihis.programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, sihis.programa);
}

                            if(sihis.ano == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, sihis.ano);
}

                            if(sihis.mes == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, sihis.mes);
}

                            if(sihis.cantidad == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, sihis.cantidad);
}

                    pstmt_tDBOutput_2.addBatch();
                    nb_line_tDBOutput_2++;

                      batchSizeCounter_tDBOutput_2++;
            if(!whetherReject_tDBOutput_2) {
            }
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_2 = 0;
            }
                commitCounter_tDBOutput_2++;

                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_2.commit();
                    commitCounter_tDBOutput_2=0;

                }


 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "sihis"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row5"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
                		if (batchSizeCounter_tDBOutput_2 != 0) {
							int countSum_tDBOutput_2 = 0;
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_2 = 0;
    		
	

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
    	if (commitCounter_tDBOutput_2 > 0) {
    		
    		conn_tDBOutput_2.commit();
    		
    	}
    		
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("sihis"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEDIRECTORY"))+"\\"+((String)globalMap.get("tFileList_1_CURRENT_FILE")));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",((String)globalMap.get("tFileList_1_CURRENT_FILEDIRECTORY"))+"\\"+((String)globalMap.get("tFileList_1_CURRENT_FILE")));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "PruebaLocal";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final GuardarTramasHis GuardarTramasHisClass = new GuardarTramasHis();

        int exitCode = GuardarTramasHisClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = GuardarTramasHis.class.getClassLoader().getResourceAsStream("etl_indicadores_diresa/guardartramashis_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = GuardarTramasHis.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("bddiresa_Database", "id_String");
                            context.bddiresa_Database=(String) context.getProperty("bddiresa_Database");
                        context.setContextType("bddiresa_Password", "id_Password");
                            String pwd_bddiresa_Password_value = context.getProperty("bddiresa_Password");
                            context.bddiresa_Password = null;
                            if(pwd_bddiresa_Password_value!=null) {
                                if(context_param.containsKey("bddiresa_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.bddiresa_Password = pwd_bddiresa_Password_value;
                                } else if (!pwd_bddiresa_Password_value.isEmpty()) {
                                    try {
                                        context.bddiresa_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_bddiresa_Password_value);
                                        context.put("bddiresa_Password",context.bddiresa_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("bddiresa_AdditionalParams", "id_String");
                            context.bddiresa_AdditionalParams=(String) context.getProperty("bddiresa_AdditionalParams");
                        context.setContextType("bddiresa_Login", "id_String");
                            context.bddiresa_Login=(String) context.getProperty("bddiresa_Login");
                        context.setContextType("bddiresa_Port", "id_String");
                            context.bddiresa_Port=(String) context.getProperty("bddiresa_Port");
                        context.setContextType("bddiresa_Server", "id_String");
                            context.bddiresa_Server=(String) context.getProperty("bddiresa_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("bddiresa_Database")) {
                context.bddiresa_Database = (String) parentContextMap.get("bddiresa_Database");
            }if (parentContextMap.containsKey("bddiresa_Password")) {
                context.bddiresa_Password = (java.lang.String) parentContextMap.get("bddiresa_Password");
            }if (parentContextMap.containsKey("bddiresa_AdditionalParams")) {
                context.bddiresa_AdditionalParams = (String) parentContextMap.get("bddiresa_AdditionalParams");
            }if (parentContextMap.containsKey("bddiresa_Login")) {
                context.bddiresa_Login = (String) parentContextMap.get("bddiresa_Login");
            }if (parentContextMap.containsKey("bddiresa_Port")) {
                context.bddiresa_Port = (String) parentContextMap.get("bddiresa_Port");
            }if (parentContextMap.containsKey("bddiresa_Server")) {
                context.bddiresa_Server = (String) parentContextMap.get("bddiresa_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("bddiresa_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : GuardarTramasHis");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     262348 characters generated by Talend Open Studio for Data Integration 
 *     on the 17 de octubre de 2019 11:52:47 AM COT
 ************************************************************************************************/